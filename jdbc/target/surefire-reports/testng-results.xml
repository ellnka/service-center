<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="21" passed="21">
  <reporter-output>
  </reporter-output>
  <suite name="Services-Jdbc test suite" duration-ms="613" started-at="2017-06-24T12:04:07Z" finished-at="2017-06-24T12:04:08Z">
    <groups>
    </groups>
    <test name="setup" duration-ms="2" started-at="2017-06-24T12:04:07Z" finished-at="2017-06-24T12:04:07Z">
    </test> <!-- setup -->
    <test name="GenericDaoImpl(User/UserRole/Item/Order) + UserManager tests" duration-ms="598" started-at="2017-06-24T12:04:07Z" finished-at="2017-06-24T12:04:08Z">
      <class name="com.source.it.jdbc.dao.H2Starter">
        <test-method status="PASS" signature="startH2()[pri:0, instance:com.source.it.jdbc.dao.H2Starter@7dc36524]" name="startH2" is-config="true" duration-ms="194" started-at="2017-06-24T15:04:07Z" finished-at="2017-06-24T15:04:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startH2 -->
        <test-method status="PASS" signature="shutDownH2()[pri:0, instance:com.source.it.jdbc.dao.H2Starter@7dc36524]" name="shutDownH2" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- shutDownH2 -->
      </class> <!-- com.source.it.jdbc.dao.H2Starter -->
      <class name="com.source.it.jdbc.manager.UserDaoManagerTest">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.source.it.jdbc.manager.UserDaoManagerTest@32709393]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="4" started-at="2017-06-24T15:04:08Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.source.it.jdbc.manager.UserDaoManagerTest@32709393]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.source.it.jdbc.manager.UserDaoManagerTest@32709393]" name="setUp" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="testGetUserByLogin()[pri:1, instance:com.source.it.jdbc.manager.UserDaoManagerTest@32709393]" name="testGetUserByLogin" duration-ms="2" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetUserByLogin -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.manager.UserDaoManagerTest@32709393]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.manager.UserDaoManagerTest.testGetUserByLogin()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.manager.UserDaoManagerTest@32709393]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.manager.UserDaoManagerTest.testGetUserByLogin()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testGetUserByLoginForUnexistingUser()[pri:10, instance:com.source.it.jdbc.manager.UserDaoManagerTest@32709393]" name="testGetUserByLoginForUnexistingUser" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <exception class="com.source.it.jdbc.exceptions.GenericDaoException">
            <message>
              <![CDATA[Error reading  user from DB - no user was found with login = Some unexisting login]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.source.it.jdbc.exceptions.GenericDaoException: Error reading  user from DB - no user was found with login = Some unexisting login
	at com.source.it.jdbc.manager.UserManager.getUserByLogin(UserManager.java:41)
	at com.source.it.jdbc.manager.UserDaoManagerTest.testGetUserByLoginForUnexistingUser(UserDaoManagerTest.java:67)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:196)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:175)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:208)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:635)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- com.source.it.jdbc.exceptions.GenericDaoException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetUserByLoginForUnexistingUser -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.manager.UserDaoManagerTest@32709393]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.manager.UserDaoManagerTest.testGetUserByLoginForUnexistingUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.manager.UserDaoManagerTest@32709393]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.manager.UserDaoManagerTest.testGetUserByLoginForUnexistingUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.source.it.jdbc.manager.UserDaoManagerTest@32709393]" name="tearDown" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.source.it.jdbc.manager.UserDaoManagerTest@32709393]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.source.it.jdbc.manager.UserDaoManagerTest -->
      <class name="com.source.it.jdbc.dao.GenericDaoImplTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:07Z" finished-at="2017-06-24T15:04:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="342" started-at="2017-06-24T15:04:07Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="setUp" is-config="true" duration-ms="7" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplTest.testReadUnexistingUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testReadUnexistingUser()[pri:1, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="testReadUnexistingUser" duration-ms="3" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <exception class="com.source.it.jdbc.exceptions.GenericDaoException">
            <message>
              <![CDATA[Error reading user from data base - no users were found with id = 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.source.it.jdbc.exceptions.GenericDaoException: Error reading user from data base - no users were found with id = 1
	at com.source.it.jdbc.dao.GenericDaoImpl.read(GenericDaoImpl.java:87)
	at com.source.it.jdbc.dao.GenericDaoImplTest.testReadUnexistingUser(GenericDaoImplTest.java:53)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:196)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:175)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:208)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:635)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- com.source.it.jdbc.exceptions.GenericDaoException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadUnexistingUser -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplTest.testWriteNewUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testWriteNewUser()[pri:20, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="testWriteNewUser" duration-ms="3" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNewUser -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplTest.testReadUnexistingUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplTest.testWriteNewUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testReadExistingUser()[pri:30, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="testReadExistingUser" duration-ms="2" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadExistingUser -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplTest.testReadExistingUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplTest.testReadExistingUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplTest.testUpdateUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testUpdateUser()[pri:40, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="testUpdateUser" duration-ms="3" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateUser -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplTest.testUpdateUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testDeleteUser()[pri:50, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="testDeleteUser" duration-ms="3" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <exception class="com.source.it.jdbc.exceptions.GenericDaoException">
            <message>
              <![CDATA[Error reading user from data base - no users were found with id = 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.source.it.jdbc.exceptions.GenericDaoException: Error reading user from data base - no users were found with id = 1
	at com.source.it.jdbc.dao.GenericDaoImpl.read(GenericDaoImpl.java:87)
	at com.source.it.jdbc.dao.GenericDaoImplTest.testDeleteUser(GenericDaoImplTest.java:108)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:196)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:175)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:208)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:635)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- com.source.it.jdbc.exceptions.GenericDaoException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteUser -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplTest.testDeleteUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="tearDown" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplTest.testDeleteUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplTest@3cef309d]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.source.it.jdbc.dao.GenericDaoImplTest -->
      <class name="com.source.it.jdbc.dao.GenericDaoImplOrderTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="14" started-at="2017-06-24T15:04:08Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="setUp" is-config="true" duration-ms="4" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplOrderTest.testCreateOrder()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testCreateOrder()[pri:10, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="testCreateOrder" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateOrder -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplOrderTest.testCreateOrder()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplOrderTest.testUpdateOrder()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testUpdateOrder()[pri:30, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="testUpdateOrder" duration-ms="68" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateOrder -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplOrderTest.testDeleteItem()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testDeleteItem()[pri:40, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="testDeleteItem" duration-ms="77" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <exception class="com.source.it.jdbc.exceptions.GenericDaoException">
            <message>
              <![CDATA[Error reading order from data base - no orders were found with id = 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.source.it.jdbc.exceptions.GenericDaoException: Error reading order from data base - no orders were found with id = 1
	at com.source.it.jdbc.dao.GenericDaoImpl.read(GenericDaoImpl.java:87)
	at com.source.it.jdbc.dao.GenericDaoImplOrderTest.testDeleteItem(GenericDaoImplOrderTest.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:196)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:175)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:208)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:635)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- com.source.it.jdbc.exceptions.GenericDaoException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteItem -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplOrderTest.testUpdateOrder()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="tearDown" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplOrderTest.testDeleteItem()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplOrderTest@cd2dae5]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.source.it.jdbc.dao.GenericDaoImplOrderTest -->
      <class name="com.source.it.jdbc.dao.GenericDaoImplItemTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="6" started-at="2017-06-24T15:04:08Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="setUp" is-config="true" duration-ms="3" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplItemTest.testCreateItem() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="testCreateItem()[pri:10, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="testCreateItem" duration-ms="2" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCreateItem -->
        <test-method status="PASS" signature="testReadExistingItem()[pri:20, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="testReadExistingItem" duration-ms="5" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadExistingItem -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplItemTest.testCreateItem() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplItemTest.testReadExistingItem()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplItemTest.testUpdateItem()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplItemTest.testReadExistingItem()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testUpdateItem()[pri:30, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="testUpdateItem" duration-ms="5" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUpdateItem -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplItemTest.testUpdateItem()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testDeleteItem()[pri:40, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="testDeleteItem" duration-ms="7" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <exception class="com.source.it.jdbc.exceptions.GenericDaoException">
            <message>
              <![CDATA[Error reading item from data base - no items were found with id = 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.source.it.jdbc.exceptions.GenericDaoException: Error reading item from data base - no items were found with id = 1
	at com.source.it.jdbc.dao.GenericDaoImpl.read(GenericDaoImpl.java:87)
	at com.source.it.jdbc.dao.GenericDaoImplItemTest.testDeleteItem(GenericDaoImplItemTest.java:103)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:196)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:175)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:208)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:635)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:293)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:91)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- com.source.it.jdbc.exceptions.GenericDaoException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDeleteItem -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplItemTest.testDeleteItem()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.source.it.jdbc.dao.GenericDaoImplItemTest.testDeleteItem()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="tearDown" is-config="true" duration-ms="3" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:com.source.it.jdbc.dao.GenericDaoImplItemTest@49fc609f]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- com.source.it.jdbc.dao.GenericDaoImplItemTest -->
      <class name="com.source.it.utils.SqlGeneratorUtilsTest">
        <test-method status="PASS" signature="testGenerateDeleteSqlForUser()[pri:0, instance:com.source.it.utils.SqlGeneratorUtilsTest@3d99d22e]" name="testGenerateDeleteSqlForUser" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerateDeleteSqlForUser -->
        <test-method status="PASS" signature="testGenerateCreateSqlForUser()[pri:0, instance:com.source.it.utils.SqlGeneratorUtilsTest@3d99d22e]" name="testGenerateCreateSqlForUser" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerateCreateSqlForUser -->
        <test-method status="PASS" signature="testGenerateSelectSqlForItem()[pri:0, instance:com.source.it.utils.SqlGeneratorUtilsTest@3d99d22e]" name="testGenerateSelectSqlForItem" duration-ms="1" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerateSelectSqlForItem -->
        <test-method status="PASS" signature="testGenerateSelectSqlForItemType()[pri:0, instance:com.source.it.utils.SqlGeneratorUtilsTest@3d99d22e]" name="testGenerateSelectSqlForItemType" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerateSelectSqlForItemType -->
        <test-method status="PASS" signature="testGenerateSelectSqlForUser()[pri:0, instance:com.source.it.utils.SqlGeneratorUtilsTest@3d99d22e]" name="testGenerateSelectSqlForUser" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerateSelectSqlForUser -->
        <test-method status="PASS" signature="testGenerateSelectSqlForWarrantyPeriod()[pri:0, instance:com.source.it.utils.SqlGeneratorUtilsTest@3d99d22e]" name="testGenerateSelectSqlForWarrantyPeriod" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerateSelectSqlForWarrantyPeriod -->
        <test-method status="PASS" signature="testGenerateUserUpdateSql()[pri:0, instance:com.source.it.utils.SqlGeneratorUtilsTest@3d99d22e]" name="testGenerateUserUpdateSql" duration-ms="0" started-at="2017-06-24T15:04:08Z" finished-at="2017-06-24T15:04:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGenerateUserUpdateSql -->
      </class> <!-- com.source.it.utils.SqlGeneratorUtilsTest -->
    </test> <!-- GenericDaoImpl(User/UserRole/Item/Order) + UserManager tests -->
  </suite> <!-- Services-Jdbc test suite -->
</testng-results>
